---
version: 0.2

branches:
  default:
    stage: pre-merge

models:
  - env: &docker_env
      DEVELOPMENT_DOCKER_IMAGE_NAME: >-
        registry.scality.com/%(prop:git_slug)s-dev/%(prop:git_slug)s
      PRODUCTION_DOCKER_IMAGE_NAME: >-
        registry.scality.com/%(prop:git_slug)s/%(prop:git_slug)s
  - ShellCommand: &docker_login
      name: Login to docker registry
      command: >
        docker login
        -u "${HARBOR_LOGIN}"
        -p "${HARBOR_PASSWORD}"
        registry.scality.com
      usePTY: true
      env:
        HARBOR_LOGIN: '%(secret:harbor_login)s'
        HARBOR_PASSWORD: '%(secret:harbor_password)s'
  - ShellCommand: &wait_docker_daemon
      name: Wait for Docker daemon to be ready
      command: |
        bash -c '
        for i in {1..150}
        do
          docker info &> /dev/null && exit
          sleep 2
        done
        echo "Could not reach Docker daemon from buildbot worker" >&2
        exit 1'
      haltOnFailure: true

stages:
  pre-merge:
    worker:
      type: local
    steps:
    - TriggerStages:
        stage_names:
        - tests
        - build
  tests:
    worker: &master-worker
      type: docker
      path: eve/workers/master
      volumes:
        - '/home/eve/workspace'
    steps:
      - Git: &git_clone
          name: fetch source
          repourl: '%(prop:git_reference)s'
          shallow: True
          retryFetch: True
          haltOnFailure: True
      - ShellCommand:
          name: install dependencies
          command: yarn 
      - ShellCommand:
          name: run lint
          command: yarn --silent lint -- --max-warnings 0
      - ShellCommand:
          name: run test
          command: yarn --silent test:unit
      - ShellCommand:
          name: run test
          command: yarn --silent test:functional 

  # The docker-build stage ensures that your images are built on every commit
  # and also hosted on the registry to help you pull it up and
  # test it in a real environment if needed.
  # It also allows us to pull and rename it when performing a release.
  docker-build:
    worker: &docker_worker
      type: kube_pod
      path: eve/workers/docker/pod.yaml
      images:
        worker: eve/workers/docker
    steps:
      - Git: *git_clone
      - ShellCommand: *wait_docker_daemon
      - ShellCommand: *docker_login
      - ShellCommand:
          name: docker build
          command: >-
            docker build .
            --tag=${DEVELOPMENT_DOCKER_IMAGE_NAME}:%(prop:commit_short_revision)s
          env: *docker_env
          haltOnFailure: true
      - ShellCommand:
          name: push docker image into the development namespace
          command: docker push ${DEVELOPMENT_DOCKER_IMAGE_NAME}
          haltOnFailure: true
          env: *docker_env

  # This stage can be used to release your Docker image.
  # To use this stage:
  # 1. Tag the repository
  # 2. Force a build using:
  #    * A branch that ideally matches the tag
  #    * The release stage
  #    * An extra property with the name `tag` and its value being the actual tag.
  release:
    worker:
      type: local
    steps:
      - TriggerStages:
          stage_names:
            - docker-release
          haltOnFailure: true
  docker-release:
    worker: *docker_worker
    steps:
      - Git: *git_clone
      - ShellCommand: *wait_docker_daemon
      - ShellCommand: *docker_login
      - EvePropertyFromCommand:
          name: get tag short revision
          property: tag_revision
          command: |
            git checkout refs/tags/%(prop:tag)s 2&> /dev/null
            git rev-parse --short HEAD
          haltOnFailure: true
      - ShellCommand:
          name: publish docker image to Scality Production OCI registry
          command: |
            docker pull ${DEVELOPMENT_DOCKER_IMAGE_NAME}:%(prop:tag_revision)s
            docker tag ${DEVELOPMENT_DOCKER_IMAGE_NAME}:%(prop:tag_revision)s \
            ${PRODUCTION_DOCKER_IMAGE_NAME}:%(prop:tag)s
            docker push ${PRODUCTION_DOCKER_IMAGE_NAME}:%(prop:tag)s
          env: *docker_env
